'use client'

import { useState } from 'react'
import { Button } from '@/components/ui/button'
import { Input } from '@/components/ui/input'
import { Label } from '@/components/ui/label'
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card'
import { ProfessionalRoleSelector } from '@/components/ui/professional-selector'
import { useAuth } from '@/contexts/AuthContext'
import { ProfessionalRole } from '@/types'
import { Users, Building, CreditCard, ShieldCheck, ArrowLeft, ArrowRight } from 'lucide-react'
import Link from 'next/link'
import { useRouter } from 'next/navigation'
import DataService from '@/lib/data-service'

interface BusinessInfo {
  companyName: string
  businessType: string
  gstNumber: string
  panNumber: string
  address: string
  contactEmail: string
  contactPhone: string
}

interface PaymentInfo {
  accountHolderName: string
  bankName: string
  accountNumber: string
  ifscCode: string
  accountType: string
  upiId: string
  paymentSchedule: string
  minimumPayout: string
}

export default function SignUpPage() {
  const [email, setEmail] = useState('')
  const [fullName, setFullName] = useState('')
  const [phone, setPhone] = useState('')
  const [city, setCity] = useState('')
  const [professionalRole, setProfessionalRole] = useState<ProfessionalRole>()
  const [currentStep, setCurrentStep] = useState<'signup' | 'business' | 'payment' | 'otp' | 'success'>('signup')
  const [otp, setOtp] = useState('')
  const [userType, setUserType] = useState<'individual' | 'space-owner'>('individual')
  const [ownerStep, setOwnerStep] = useState(1) // For space owner multi-step process
  
  // Business Information State
  const [businessInfo, setBusinessInfo] = useState<BusinessInfo>({
    companyName: '',
    businessType: '',
    gstNumber: '',
    panNumber: '',
    address: '',
    contactEmail: '',
    contactPhone: ''
  })

  // Payment Information State
  const [paymentInfo, setPaymentInfo] = useState<PaymentInfo>({
    accountHolderName: '',
    bankName: '',
    accountNumber: '',
    ifscCode: '',
    accountType: '',
    upiId: '',
    paymentSchedule: 'monthly',
    minimumPayout: '1000'
  })
  
  const { signup, isLoading } = useAuth()
  const router = useRouter()

  const handleSignUpSubmit = async (e: React.FormEvent) => {
    e.preventDefault()
    
    if (userType === 'individual') {
      if (!professionalRole) {
        alert('Please select your professional category')
        return
      }
      // For individuals, go directly to OTP
      setCurrentStep('otp')
    } else {
      // For space owners, go to business information step
      setCurrentStep('business')
      setOwnerStep(1)
    }
  }

  const handleBusinessInfoSubmit = (e: React.FormEvent) => {
    e.preventDefault()
    
    // Validate business information
    if (!businessInfo.companyName || !businessInfo.businessType || !businessInfo.gstNumber || 
        !businessInfo.panNumber || !businessInfo.address || !businessInfo.contactEmail) {
      alert('Please fill in all required business information fields')
      return
    }
    
    // Move to payment information step
    setCurrentStep('payment')
    setOwnerStep(2)
  }

  const handlePaymentInfoSubmit = (e: React.FormEvent) => {
    e.preventDefault()
    
    // Validate payment information
    if (!paymentInfo.accountHolderName || !paymentInfo.bankName || !paymentInfo.accountNumber || 
        !paymentInfo.ifscCode || !paymentInfo.accountType) {
      alert('Please fill in all required payment information fields')
      return
    }
    
    // Move to OTP verification
    setCurrentStep('otp')
  }

  const handleBackToPrevious = () => {
    if (currentStep === 'business') {
      setCurrentStep('signup')
      setOwnerStep(0)
    } else if (currentStep === 'payment') {
      setCurrentStep('business')
      setOwnerStep(1)
    } else if (currentStep === 'otp') {
      if (userType === 'space-owner') {
        setCurrentStep('payment')
        setOwnerStep(2)
      } else {
        setCurrentStep('signup')
      }
    }
  }

  const handleOTPVerify = async (e: React.FormEvent) => {
    e.preventDefault()
    
    if (otp.length !== 6) {
      alert('Please enter a valid 6-digit OTP')
      return
    }
    
    // Validate OTP before calling signup
    if (otp !== '123456') {
      alert('Invalid OTP. Please try 123456 for demo.')
      return
    }
    
    const userData = {
      email,
      fullName,
      phone,
      city,
      professionalRole,
      userType
    }
    
    const success = await signup(userData)
    if (success) {
      setCurrentStep('success')
      setTimeout(() => {
        if (userType === 'space-owner') {
          router.push('/owner/onboarding')
        } else {
          router.push('/dashboard')
        }
      }, 2000)
    } else {
      alert('Signup failed. Please try again.')
    }
  }

  return (
    <div className="min-h-screen bg-gradient-to-br from-black via-gray-900 to-black text-white flex items-center justify-center py-8">
      <div className="max-w-2xl w-full mx-4">
        {/* Logo */}
        <div className="text-center mb-8">
          <Link href="/" className="inline-flex items-center space-x-3">
            <div className="w-24 h-24  flex items-center justify-center ">
              <img src="/logo.svg" alt="Clubicles Logo" className="w-14 h-14" />
            </div>
            <span className="font-orbitron text-4xl md:text-6xl font-black tracking-wider text-white">
              CLUBICLES
            </span>
          </Link>
        </div>

        {currentStep === 'signup' && (
          <Card className="bg-white/10 backdrop-blur-md border-white/20 hover:bg-white/15 transition-all duration-300 hover:scale-105 rounded-2xl shadow-2xl">
            <CardHeader className="text-center pb-8">
              <CardTitle className="text-3xl font-bold bg-gradient-to-r from-white via-gray-200 to-gray-400 bg-clip-text text-transparent mb-2">
                Create Your Account
              </CardTitle>
              <p className="text-gray-400">Join thousands of professionals finding their perfect workspace</p>
            </CardHeader>
            <CardContent className="px-8 pb-8">
              {/* User Type Selection Tabs */}
              <div className="flex mb-6 bg-white/10 backdrop-blur-sm rounded-xl p-1">
                <button
                  type="button"
                  onClick={() => setUserType('individual')}
                  className={`flex-1 py-3 px-4 rounded-lg flex items-center justify-center gap-2 transition-all duration-200 ${
                    userType === 'individual'
                      ? 'bg-white text-black shadow-lg'
                      : 'text-white/70 hover:text-white hover:bg-white/5'
                  }`}
                >
                  <Users className="h-4 w-4" />
                  Individuals
                </button>
                <button
                  type="button"
                  onClick={() => setUserType('space-owner')}
                  className={`flex-1 py-3 px-4 rounded-lg flex items-center justify-center gap-2 transition-all duration-200 ${
                    userType === 'space-owner'
                      ? 'bg-white text-black shadow-lg'
                      : 'text-white/70 hover:text-white hover:bg-white/5'
                  }`}
                >
                  <Building className="h-4 w-4" />
                  Space Owners
                </button>
              </div>

              <form onSubmit={handleSignUpSubmit} className="space-y-6">
                <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                  <div>
                    <Label htmlFor="fullName" className="text-white font-medium">Full Name</Label>
                    <Input
                      id="fullName"
                      type="text"
                      placeholder="Enter your full name"
                      value={fullName}
                      onChange={(e) => setFullName(e.target.value)}
                      className="mt-2 bg-white/20 backdrop-blur-sm border border-white/30 rounded-xl px-4 py-3 text-white placeholder-white/60 focus:outline-none focus:ring-2 focus:ring-white/50 focus:border-white/50 transition-all duration-200"
                      required
                    />
                  </div>
                  <div>
                    <Label htmlFor="email" className="text-white font-medium">Email Address</Label>
                    <Input
                      id="email"
                      type="email"
                      placeholder="Enter your email"
                      value={email}
                      onChange={(e) => setEmail(e.target.value)}
                      className="mt-2 bg-white/20 backdrop-blur-sm border border-white/30 rounded-xl px-4 py-3 text-white placeholder-white/60 focus:outline-none focus:ring-2 focus:ring-white/50 focus:border-white/50 transition-all duration-200"
                      required
                    />
                  </div>
                </div>

                <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                  <div>
                    <Label htmlFor="phone" className="text-white font-medium">Phone Number</Label>
                    <Input
                      id="phone"
                      type="tel"
                      placeholder="Enter your phone number"
                      value={phone}
                      onChange={(e) => setPhone(e.target.value)}
                      className="mt-2 bg-white/20 backdrop-blur-sm border border-white/30 rounded-xl px-4 py-3 text-white placeholder-white/60 focus:outline-none focus:ring-2 focus:ring-white/50 focus:border-white/50 transition-all duration-200"
                      required
                    />
                  </div>
                  <div>
                    <Label htmlFor="city" className="text-white font-medium">City</Label>
                    <Input
                      id="city"
                      type="text"
                      placeholder="Enter your city"
                      value={city}
                      onChange={(e) => setCity(e.target.value)}
                      className="mt-2 bg-white/20 backdrop-blur-sm border border-white/30 rounded-xl px-4 py-3 text-white placeholder-white/60 focus:outline-none focus:ring-2 focus:ring-white/50 focus:border-white/50 transition-all duration-200"
                      required
                    />
                  </div>
                </div>

                <div className="space-y-6">
                  {userType === 'individual' && (
                    <div className="mt-6 mb-8 bg-white/5 p-6 rounded-xl">
                      <ProfessionalRoleSelector
                        selectedRole={professionalRole}
                        onRoleSelect={setProfessionalRole}
                        className="relative z-10"
                      />
                    </div>
                  )}
                </div>

                <Button 
                  type="submit" 
                  variant="ghost"
                  className="w-full bg-gradient-to-r from-white to-gray-200 text-black font-semibold hover:from-gray-200 hover:to-gray-300 transition-all duration-200 shadow-lg hover:shadow-xl transform hover:scale-[1.02] h-12 mt-8"
                  disabled={isLoading}
                >
                  {isLoading ? (
                    <div className="flex items-center !text-black">
                      <div className="animate-spin rounded-full h-4 w-4 border-b-2 border-black mr-2"></div>
                      Creating Account...
                    </div>
                  ) :  <div className="flex items-center !text-black">
                      Create Account
                    </div>}
                </Button>

                <div className="text-center pt-6 border-t border-gray-700">
                  <p className="text-gray-400">
                    Already have an account?{' '}
                    <Link href="/signin" className="text-white hover:text-gray-300 font-medium transition-colors underline underline-offset-2">
                      Sign in here
                    </Link>
                  </p>
                </div>
              </form>
            </CardContent>
          </Card>
        )}

        {/* Business Information Step */}
        {currentStep === 'business' && (
          <Card className="bg-white/10 backdrop-blur-md border-white/20 hover:bg-white/15 transition-all duration-300 hover:scale-105 rounded-2xl shadow-2xl max-w-2xl mx-auto">
            <CardHeader className="text-center pb-6">
              <CardTitle className="text-3xl font-bold text-white mb-4 flex items-center justify-center gap-3">
                <Building className="w-8 h-8" />
                Business Information
              </CardTitle>
              <p className="text-gray-300 text-lg">
                Tell us about your business for verification
              </p>
            </CardHeader>
            <CardContent className="px-8 pb-8">
              <form onSubmit={handleBusinessInfoSubmit} className="space-y-6">
                <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                  <div>
                    <Label className="text-white font-medium">Company Name *</Label>
                    <Input
                      placeholder="Enter company name"
                      value={businessInfo.companyName}
                      onChange={(e) => setBusinessInfo(prev => ({ ...prev, companyName: e.target.value }))}
                      className="mt-2 bg-white/20 backdrop-blur-sm border border-white/30 rounded-xl px-4 py-3 text-white placeholder-white/60 focus:outline-none focus:ring-2 focus:ring-white/50 focus:border-white/50 transition-all duration-200"
                      required
                    />
                  </div>
                  <div>
                    <Label className="text-white font-medium">Business Type *</Label>
                    <select
                      value={businessInfo.businessType}
                      onChange={(e) => setBusinessInfo(prev => ({ ...prev, businessType: e.target.value }))}
                      className="mt-2 w-full p-3 rounded-xl bg-white/20 backdrop-blur-sm border border-white/30 text-white focus:outline-none focus:ring-2 focus:ring-white/50 focus:border-white/50 transition-all duration-200"
                      required
                    >
                      <option value="">Select business type</option>
                      {DataService.getBusinessTypes().map((type) => (
                        <option key={type} value={type}>{type}</option>
                      ))}
                    </select>
                  </div>
                </div>

                <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                  <div>
                    <Label className="text-white font-medium">GST Number *</Label>
                    <Input
                      placeholder="22AAAAA0000A1Z5"
                      value={businessInfo.gstNumber}
                      onChange={(e) => setBusinessInfo(prev => ({ ...prev, gstNumber: e.target.value }))}
                      className="mt-2 bg-white/20 backdrop-blur-sm border border-white/30 rounded-xl px-4 py-3 text-white placeholder-white/60 focus:outline-none focus:ring-2 focus:ring-white/50 focus:border-white/50 transition-all duration-200"
                      required
                    />
                  </div>
                  <div>
                    <Label className="text-white font-medium">PAN Number *</Label>
                    <Input
                      placeholder="AAAAA0000A"
                      value={businessInfo.panNumber}
                      onChange={(e) => setBusinessInfo(prev => ({ ...prev, panNumber: e.target.value }))}
                      className="mt-2 bg-white/20 backdrop-blur-sm border border-white/30 rounded-xl px-4 py-3 text-white placeholder-white/60 focus:outline-none focus:ring-2 focus:ring-white/50 focus:border-white/50 transition-all duration-200"
                      required
                    />
                  </div>
                </div>

                <div>
                  <Label className="text-white font-medium">Business Address *</Label>
                  <textarea
                    placeholder="Enter complete business address"
                    value={businessInfo.address}
                    onChange={(e) => setBusinessInfo(prev => ({ ...prev, address: e.target.value }))}
                    rows={3}
                    className="mt-2 w-full p-3 rounded-xl bg-white/20 backdrop-blur-sm border border-white/30 text-white placeholder-white/60 focus:outline-none focus:ring-2 focus:ring-white/50 focus:border-white/50 transition-all duration-200 resize-none"
                    required
                  />
                </div>

                <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                  <div>
                    <Label className="text-white font-medium">Business Email *</Label>
                    <Input
                      type="email"
                      placeholder="business@company.com"
                      value={businessInfo.contactEmail}
                      onChange={(e) => setBusinessInfo(prev => ({ ...prev, contactEmail: e.target.value }))}
                      className="mt-2 bg-white/20 backdrop-blur-sm border border-white/30 rounded-xl px-4 py-3 text-white placeholder-white/60 focus:outline-none focus:ring-2 focus:ring-white/50 focus:border-white/50 transition-all duration-200"
                      required
                    />
                  </div>
                  <div>
                    <Label className="text-white font-medium">Business Phone</Label>
                    <Input
                      placeholder="+91 XXXXX XXXXX"
                      value={businessInfo.contactPhone}
                      onChange={(e) => setBusinessInfo(prev => ({ ...prev, contactPhone: e.target.value }))}
                      className="mt-2 bg-white/20 backdrop-blur-sm border border-white/30 rounded-xl px-4 py-3 text-white placeholder-white/60 focus:outline-none focus:ring-2 focus:ring-white/50 focus:border-white/50 transition-all duration-200"
                    />
                  </div>
                </div>

                <div className="flex space-x-4">
                  <Button 
                    type="button"
                    onClick={handleBackToPrevious}
                    variant="outline"
                    className="bg-gray-800/50 border-gray-600 text-white hover:bg-gray-700 flex-1"
                  >
                    <ArrowLeft className="w-4 h-4 mr-2" />
                    Back
                  </Button>
                 <Button
  type="submit"
  variant="ghost" // 👈 prevents default bg/text colors
  className="bg-gradient-to-r from-white to-gray-200 text-black font-semibold hover:from-gray-200 hover:to-gray-300 flex-1"
>
  Continue to Payment Info
  <ArrowRight className="w-4 h-4 ml-2" />
</Button>

                </div>
              </form>
            </CardContent>
          </Card>
        )}

        {/* Payment Information Step */}
        {currentStep === 'payment' && (
          <Card className="bg-white/10 backdrop-blur-md border-white/20 hover:bg-white/15 transition-all duration-300 hover:scale-105 rounded-2xl shadow-2xl max-w-2xl mx-auto">
            <CardHeader className="text-center pb-6">
              <CardTitle className="text-3xl font-bold text-white mb-4 flex items-center justify-center gap-3">
                <CreditCard className="w-8 h-8" />
                Payment Information
              </CardTitle>
              <p className="text-gray-300 text-lg">
                Setup your payout details for receiving payments
              </p>
            </CardHeader>
            <CardContent className="px-8 pb-8">
              <form onSubmit={handlePaymentInfoSubmit} className="space-y-6">
                <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                  <div>
                    <Label className="text-white font-medium">Account Holder Name *</Label>
                    <Input
                      placeholder="Full name as per bank records"
                      value={paymentInfo.accountHolderName}
                      onChange={(e) => setPaymentInfo(prev => ({ ...prev, accountHolderName: e.target.value }))}
                      className="mt-2 bg-white/20 backdrop-blur-sm border border-white/30 rounded-xl px-4 py-3 text-white placeholder-white/60 focus:outline-none focus:ring-2 focus:ring-white/50 focus:border-white/50 transition-all duration-200"
                      required
                    />
                  </div>
                  <div>
                    <Label className="text-white font-medium">Bank Name *</Label>
                    <select
                      value={paymentInfo.bankName}
                      onChange={(e) => setPaymentInfo(prev => ({ ...prev, bankName: e.target.value }))}
                      className="mt-2 w-full p-3 rounded-xl bg-white/20 backdrop-blur-sm border border-white/30 text-white focus:outline-none focus:ring-2 focus:ring-white/50 focus:border-white/50 transition-all duration-200"
                      required
                    >
                      <option value="">Select your bank</option>
                      {DataService.getPopularBanks().map((bank) => (
                        <option key={bank} value={bank}>{bank}</option>
                      ))}
                    </select>
                  </div>
                </div>

                <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                  <div>
                    <Label className="text-white font-medium">Account Number *</Label>
                    <Input
                      placeholder="Enter account number"
                      value={paymentInfo.accountNumber}
                      onChange={(e) => setPaymentInfo(prev => ({ ...prev, accountNumber: e.target.value }))}
                      className="mt-2 bg-white/20 backdrop-blur-sm border border-white/30 rounded-xl px-4 py-3 text-white placeholder-white/60 focus:outline-none focus:ring-2 focus:ring-white/50 focus:border-white/50 transition-all duration-200"
                      required
                    />
                  </div>
                  <div>
                    <Label className="text-white font-medium">IFSC Code *</Label>
                    <Input
                      placeholder="e.g., SBIN0001234"
                      value={paymentInfo.ifscCode}
                      onChange={(e) => setPaymentInfo(prev => ({ ...prev, ifscCode: e.target.value }))}
                      className="mt-2 bg-white/20 backdrop-blur-sm border border-white/30 rounded-xl px-4 py-3 text-white placeholder-white/60 focus:outline-none focus:ring-2 focus:ring-white/50 focus:border-white/50 transition-all duration-200"
                      required
                    />
                  </div>
                </div>

                <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                  <div>
                    <Label className="text-white font-medium">Account Type *</Label>
                    <select
                      value={paymentInfo.accountType}
                      onChange={(e) => setPaymentInfo(prev => ({ ...prev, accountType: e.target.value }))}
                      className="mt-2 w-full p-3 rounded-xl bg-white/20 backdrop-blur-sm border border-white/30 text-white focus:outline-none focus:ring-2 focus:ring-white/50 focus:border-white/50 transition-all duration-200"
                      required
                    >
                      <option value="">Select account type</option>
                      {DataService.getBankAccountTypes().map((type) => (
                        <option key={type} value={type}>{type}</option>
                      ))}
                    </select>
                  </div>
                  <div>
                    <Label className="text-white font-medium">UPI ID (Optional)</Label>
                    <Input
                      placeholder="yourname@paytm / @googlepay"
                      value={paymentInfo.upiId}
                      onChange={(e) => setPaymentInfo(prev => ({ ...prev, upiId: e.target.value }))}
                      className="mt-2 bg-white/20 backdrop-blur-sm border border-white/30 rounded-xl px-4 py-3 text-white placeholder-white/60 focus:outline-none focus:ring-2 focus:ring-white/50 focus:border-white/50 transition-all duration-200"
                    />
                  </div>
                </div>

                <div className="flex space-x-4">
                  <Button 
                    type="button"
                    onClick={handleBackToPrevious}
                    variant="outline"
                    className="bg-gray-800/50 border-gray-600 text-white hover:bg-gray-700 flex-1"
                  >
                    <ArrowLeft className="w-4 h-4 mr-2" />
                    Back
                  </Button>
                  <Button 
                    type="submit" 
                    variant="ghost"
                    className="bg-gradient-to-r from-white to-gray-200 text-black font-semibold hover:from-gray-200 hover:to-gray-300 flex-1"
                  >
                    Complete Registration
                    <ShieldCheck className="w-4 h-4 ml-2" />
                  </Button>
                </div>
              </form>
            </CardContent>
          </Card>
        )}

        {currentStep === 'otp' && (
          <Card className="bg-white/10 backdrop-blur-md border-white/20 hover:bg-white/15 transition-all duration-300 hover:scale-105 rounded-2xl shadow-2xl max-w-md mx-auto">
            <CardHeader className="text-center">
              <CardTitle className="text-2xl font-bold text-white mb-2">Verify Your Email</CardTitle>
              <p className="text-gray-400">
                We've sent a 6-digit code to<br />
                <strong className="text-white">{email}</strong>
              </p>
            </CardHeader>
            <CardContent className="px-8 pb-8">
              <form onSubmit={handleOTPVerify} className="space-y-6">
                <div>
                  <Label htmlFor="otp" className="text-white font-medium">Enter OTP</Label>
                  <Input
                    id="otp"
                    type="text"
                    placeholder="000000"
                    value={otp}
                    onChange={(e) => setOtp(e.target.value.replace(/\D/g, '').slice(0, 6))}
                    className="text-center text-lg tracking-widest bg-white/20 backdrop-blur-sm border border-white/30 rounded-xl px-4 py-3 text-white placeholder-white/60 focus:outline-none focus:ring-2 focus:ring-white/50 focus:border-white/50 transition-all duration-200 mt-2"
                    maxLength={6}
                    required
                  />
                </div>

                <Button 
                  type="submit" 
                  variant="ghost"
                  className="w-full bg-gradient-to-r from-white to-gray-200 text-black font-semibold hover:from-gray-200 hover:to-gray-300 transition-all duration-200 shadow-lg hover:shadow-xl transform hover:scale-[1.02] h-12"
                  disabled={isLoading || otp.length !== 6}
                >
                  {isLoading ? (
                    <div className="flex items-center !text-black">
                      <div className="animate-spin rounded-full h-4 w-4 border-b-2 border-black mr-2"></div>
                      Verifying...
                    </div>
                  ) : (
                    'Verify OTP'
                  )}
                </Button>

                <div className="text-center">
                  <button
                    type="button"
                    onClick={() => setCurrentStep('signup')}
                    className="text-gray-400 hover:text-white transition-colors"
                  >
                    ← Back to sign up
                  </button>
                </div>
              </form>
            </CardContent>
          </Card>
        )}

        {currentStep === 'success' && (
          <Card className="bg-white/10 backdrop-blur-md border-white/20 hover:bg-white/15 transition-all duration-300 hover:scale-105 rounded-2xl shadow-2xl max-w-md mx-auto">
            <CardContent className="pt-12 pb-8 text-center">
              <div className="text-6xl mb-6">🎉</div>
              <h2 className="text-3xl font-bold mb-4 text-white">Welcome to Clubicles!</h2>
              {userType === 'space-owner' ? (
                <div className="space-y-4">
                  <p className="text-gray-300 mb-4">
                    Your account has been created successfully!
                  </p>
                  <div className="bg-blue-900/30 border border-blue-700 rounded-lg p-4 mb-6">
                    <div className="flex items-center justify-center mb-2">
                      <ShieldCheck className="w-5 h-5 text-blue-400 mr-2" />
                      <span className="text-blue-400 font-semibold">Next Step: Space Verification</span>
                    </div>
                    <p className="text-blue-200 text-sm">
                      You'll be redirected to provide your space details for verification purposes. 
                      This information helps us ensure quality and authenticity for our platform.
                    </p>
                  </div>
                </div>
              ) : (
                <p className="text-gray-400 mb-6">
                  Your account has been created successfully. Redirecting to your dashboard...
                </p>
              )}
              
              <div className="animate-pulse flex justify-center">
                <div className="w-8 h-8 bg-white rounded-full"></div>
              </div>
            </CardContent>
          </Card>
        )}
      </div>
    </div>
  )
}
