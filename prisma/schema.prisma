// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  user
  admin
  owner
  moderator
  violet
  indigo
  blue
  green
  yellow
  orange
  red
  grey
  white
  black
}

enum ProfessionalRole {
  violet
  indigo
  blue
  green
  yellow
  orange
  red
  grey
  white
  black
}

enum BookingStatus {
  pending
  confirmed
  cancelled
  completed
}

enum PaymentStatus {
  pending
  completed
  failed
  refunded
}

enum TicketPriority {
  low
  medium
  high
  urgent
}

enum TicketStatus {
  open
  in_progress
  resolved
  closed
}

enum TicketCategory {
  booking
  payment
  account
  technical
  general
}

enum PayoutStatus {
  pending
  processing
  completed
  failed
  cancelled
}

enum VerificationStatus {
  pending
  verified
  rejected
}

enum SupportStatus {
  open
  in_progress
  resolved
  closed
}

enum SupportPriority {
  low
  medium
  high
  urgent
}

enum SupportCategory {
  general
  technical
  billing
  feature_request
  bug_report
  booking
  payment
  account
  // Owner-specific categories
  space_creation
  space_management
  payout_issue
  payment_missing
  booking_issue
  verification_issue
  subscription_issue
  analytics_issue
}

enum PremiumPlan {
  basic
  premium
}

model User {
  id              String          @id @default(cuid())
  email           String          @unique
  password        String
  firstName       String?
  lastName        String?
  phone           String?
  city            String?
  professionalRole ProfessionalRole?
  roles           UserRole        @default(user)
  isActive        Boolean         @default(true)
  isEmailVerified Boolean         @default(false)
  emailOtp        String?
  emailOtpExpiry  DateTime?
  resetToken      String?
  resetTokenExpiry DateTime?
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt

  // Relations
  spaceOwner      SpaceOwner?
  bookings        Booking[]
  reviews         Review[]
  supportTickets  SupportTicket[]
  resources       Resource[]
  spaceMembers    SpaceMember[]
  notificationSettings OwnerNotificationSettings?

  @@map("users")
}

model SpaceOwner {
  id                    String          @id @default(cuid())
  userId                String          @unique
  email                 String          @unique
  firstName             String?
  lastName              String?
  phone                 String?
  premiumPlan           PremiumPlan     @default(basic)
  isActive              Boolean         @default(true)
  onboardingCompleted   Boolean         @default(false)
  commissionRate        Decimal         @default(10.00) @db.Decimal(5, 2)
  premiumPaymentsEnabled Boolean        @default(false)
  approvalStatus        String          @default("pending")
  planExpiryDate        DateTime?
  createdAt             DateTime        @default(now())
  updatedAt             DateTime        @updatedAt

  // Relations
  user                  User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  businessInfo          SpaceOwnerBusinessInfo?
  paymentInfo           SpaceOwnerPaymentInfo?
  paymentHistory        SpaceOwnerPaymentHistory[]
  subscriptions         SpaceOwnerSubscription[]
  payouts               SpaceOwnerPayout[]
  bookings             Booking[]       @relation("SpaceOwnerBookings")

  @@map("space_owners")
}

model SpaceOwnerBusinessInfo {
  id                String            @id @default(cuid())
  spaceOwnerId      String            @unique
  businessName      String
  businessType      String
  gstNumber         String?
  panNumber         String
  businessAddress   String
  businessCity      String
  businessState     String
  businessPincode   String
  verificationStatus VerificationStatus @default(pending)
  verifiedBy        String?
  verifiedAt        DateTime?
  rejectionReason   String?
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt

  // Relations
  spaceOwner        SpaceOwner        @relation(fields: [spaceOwnerId], references: [id], onDelete: Cascade)
  spaces            Space[]
  businessBalance   BusinessBalance?
  payouts           Payout[]

  @@map("space_owner_business_info")
}

model SpaceOwnerPaymentInfo {
  id                    String    @id @default(cuid())
  spaceOwnerId          String    @unique
  bankAccountNumber     String
  bankIfscCode          String
  bankAccountHolderName String
  bankName              String
  upiId                 String?
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt

  // Relations
  spaceOwner            SpaceOwner @relation(fields: [spaceOwnerId], references: [id], onDelete: Cascade)

  @@map("space_owner_payment_info")
}

model SpaceOwnerPaymentHistory {
  id                String    @id @default(cuid())
  spaceOwnerId      String
  subscriptionId    String?
  amount            Decimal   @db.Decimal(10, 2)
  currency          String    @default("INR")
  paymentMethod     String    @default("razorpay")
  transactionId     String    @unique
  razorpayOrderId   String?
  razorpaySignature String?
  status            String    @default("completed")
  paymentDate       DateTime
  description       String?
  createdAt         DateTime  @default(now())

  // Relations
  spaceOwner        SpaceOwner @relation(fields: [spaceOwnerId], references: [id], onDelete: Cascade)

  @@map("space_owner_payment_history")
}

model SpaceOwnerSubscription {
  id            String    @id @default(cuid())
  spaceOwnerId  String    @unique
  planName      String
  billingCycle  String
  status        String    @default("active")
  startDate     DateTime
  expiryDate    DateTime
  autoRenew     Boolean   @default(true)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Relations
  spaceOwner    SpaceOwner @relation(fields: [spaceOwnerId], references: [id], onDelete: Cascade)

  @@map("space_owner_subscriptions")
}

model SpaceOwnerPayout {
  id            String    @id @default(cuid())
  spaceOwnerId  String
  amount        Decimal   @db.Decimal(10, 2)
  paymentMethod String    @default("bank_transfer")
  transactionId String    @unique
  status        String    @default("pending")
  processedBy   String?
  processedAt   DateTime?
  notes         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Relations
  spaceOwner    SpaceOwner @relation(fields: [spaceOwnerId], references: [id], onDelete: Cascade)

  @@map("space_owner_payouts")
}

model Space {
  id              String    @id @default(cuid())
  businessId      String
  name            String
  description     String
  address         String
  city            String
  pincode         String
  latitude        Decimal?  @db.Decimal(10, 8)
  longitude       Decimal?  @db.Decimal(11, 8)
  totalSeats      Int
  availableSeats  Int       @default(0)
  pricePerHour    Decimal   @db.Decimal(10, 2)
  pricePerDay     Decimal   @db.Decimal(10, 2)
  amenities       Json      @default("[]")
  images          Json      @default("[]")
  rating          Decimal?  @default(0.0) @db.Decimal(3, 2)
  totalBookings   Int       @default(0)
  revenue         Decimal   @default(0.0) @db.Decimal(12, 2)
  operatingHours  Json?     @default("{\"days\": [\"monday\", \"tuesday\", \"wednesday\", \"thursday\", \"friday\", \"saturday\"], \"open\": \"09:00\", \"close\": \"18:00\"}")
  companyName     String?
  contactNumber   String?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  // VIBGYOR columns
  violet          Int       @default(0)
  indigo          Int       @default(0)
  blue            Int       @default(0)
  green           Int       @default(0)
  yellow          Int       @default(0)
  orange          Int       @default(0)
  red             Int       @default(0)
  grey            Int       @default(0)
  white           Int       @default(0)
  black           Int       @default(0)

  // Relations
  businessInfo    SpaceOwnerBusinessInfo @relation(fields: [businessId], references: [id], onDelete: Cascade)
  bookings        Booking[]
  reviews         Review[]
  spaceMembers    SpaceMember[]
  resources       Resource[]

  @@map("spaces")
}

model Booking {
  id                  String        @id @default(cuid())
  userId              String
  spaceId             String
  startTime           String
  endTime             String
  date                DateTime
  seatsBooked         Int
  baseAmount          Decimal       @db.Decimal(10, 2)
  taxAmount           Decimal?      @default(0) @db.Decimal(10, 2)
  totalAmount         Decimal       @db.Decimal(10, 2)
  ownerPayout         Decimal       @db.Decimal(10, 2)
  platformCommission  Decimal?      @default(0) @db.Decimal(10, 2)
  status              BookingStatus @default(pending)
  paymentId           String?
  bookingReference    String        @unique @default(cuid())
  createdAt           DateTime      @default(now())
  updatedAt           DateTime      @updatedAt

  // Redemption fields
  roles               Json          @default("[]")
  redemptionCode      String?       @unique
  qrCodeData          String?
  isRedeemed          Boolean       @default(false)
  redeemedAt          DateTime?
  redeemedBy          String?

  // Relations
  user                User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  space               Space         @relation(fields: [spaceId], references: [id], onDelete: Cascade)
  spaceOwner          SpaceOwner?   @relation("SpaceOwnerBookings", fields: [redeemedBy], references: [id])
  payments            BookingPayment[]
  taxes               BookingTax[]
  review              Review?

  @@map("bookings")
}

model BookingPayment {
  id                String        @id @default(cuid())
  bookingId         String
  razorpayPaymentId String?
  razorpayOrderId   String?
  amount            Decimal       @db.Decimal(10, 2)
  currency          String        @default("INR")
  status            PaymentStatus @default(pending)
  gatewayResponse   Json?
  createdAt         DateTime      @default(now())
  updatedAt         DateTime      @updatedAt

  // Relations
  booking           Booking       @relation(fields: [bookingId], references: [id], onDelete: Cascade)

  @@map("booking_payments")
}

model BookingTax {
  id          String  @id @default(cuid())
  bookingId   String
  taxId       String
  taxAmount   Decimal @db.Decimal(10, 2)
  baseAmount  Decimal @db.Decimal(10, 2)
  createdAt   DateTime @default(now())

  // Relations
  booking     Booking @relation(fields: [bookingId], references: [id], onDelete: Cascade)

  @@map("booking_taxes")
}

model BusinessBalance {
  id                String    @id @default(cuid())
  businessId        String    @unique
  currentBalance    Decimal   @default(0.00) @db.Decimal(12, 2)
  totalEarned       Decimal   @default(0.00) @db.Decimal(12, 2)
  totalWithdrawn    Decimal   @default(0.00) @db.Decimal(12, 2)
  pendingAmount     Decimal   @default(0.00) @db.Decimal(12, 2)
  commissionDeducted Decimal  @default(0.00) @db.Decimal(12, 2)
  taxDeducted       Decimal   @default(0.00) @db.Decimal(12, 2)
  lastPayoutDate    DateTime?
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt

  // Relations
  businessInfo      SpaceOwnerBusinessInfo @relation(fields: [businessId], references: [id], onDelete: Cascade)

  @@map("business_balances")
}

model Payout {
  id                String        @id @default(cuid())
  businessId        String
  amount            Decimal       @db.Decimal(12, 2)
  status            PayoutStatus  @default(pending)
  payoutMethod      String        @default("bank_transfer")
  bankAccount       String?
  upiId             String?
  transactionId     String?
  processedAt       DateTime?
  processedBy       String?
  notes             String?
  createdAt         DateTime      @default(now())
  updatedAt         DateTime      @updatedAt

  // Relations
  businessInfo      SpaceOwnerBusinessInfo @relation(fields: [businessId], references: [id], onDelete: Cascade)

  @@map("payouts")
}

model Review {
  id        String   @id @default(cuid())
  userId    String
  spaceId   String
  bookingId String   @unique
  rating    Int
  comment   String?
  
  // Detailed ratings (1-5 stars each)
  overallExperience Int?
  cleanliness       Int?
  restroomHygiene   Int?
  amenities         Int?
  staffService      Int?
  wifiQuality       Int?
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  space     Space    @relation(fields: [spaceId], references: [id], onDelete: Cascade)
  booking   Booking  @relation(fields: [bookingId], references: [id], onDelete: Cascade)

  @@map("reviews")
}

model SpaceMember {
  id        String   @id @default(cuid())
  spaceId   String
  userId    String
  role      String   @default("member")
  createdAt DateTime @default(now())

  // Relations
  space     Space    @relation(fields: [spaceId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("space_members")
}

model Resource {
  id        String   @id @default(cuid())
  spaceId   String
  ownerId   String
  data      String?
  createdAt DateTime @default(now())

  // Relations
  space     Space    @relation(fields: [spaceId], references: [id], onDelete: Cascade)
  owner     User     @relation(fields: [ownerId], references: [id], onDelete: Cascade)

  @@map("resources")
}

model SupportTicket {
  id              String          @id @default(cuid())
  ticketNumber    String          @unique
  userId          String
  userRole        String          @default("user") // "user" or "owner"
  subject         String
  description     String
  category        SupportCategory @default(general)
  priority        SupportPriority @default(medium)
  status          SupportStatus   @default(open)
  assignedAdminId String?
  adminResponse   String?
  internalNotes   String?
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt
  resolvedAt      DateTime?
  closedAt        DateTime?
  userAgent       String?
  ipAddress       String?
  attachments     Json?
  tags            Json            @default("[]")

  // Relations
  user            User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  messages        SupportTicketMessage[]

  @@map("support_tickets")
}

model SupportTicketMessage {
  id          String   @id @default(cuid())
  ticketId    String
  senderType  String
  senderId    String
  message     String
  attachments Json?
  isInternal  Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  ticket      SupportTicket @relation(fields: [ticketId], references: [id], onDelete: Cascade)

  @@map("support_ticket_messages")
}

model OwnerNotificationSettings {
  id                      String   @id @default(cuid())
  ownerId                 String
  emailNotifications      Boolean  @default(true)
  bookingEmailNotifications Boolean @default(true)
  reviewEmailNotifications Boolean @default(true)
  paymentReminders        Boolean  @default(true)
  createdAt               DateTime @default(now())
  updatedAt               DateTime @updatedAt

  // Relations
  owner                   User     @relation(fields: [ownerId], references: [id], onDelete: Cascade)

  @@unique([ownerId])
  @@map("owner_notification_settings")
}

model TaxConfiguration {
  id          String   @id @default(cuid())
  name        String
  percentage  Decimal  @db.Decimal(5, 2)
  isEnabled   Boolean  @default(true)
  appliesTo   String
  description String?
  createdBy   String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("tax_configurations")
}